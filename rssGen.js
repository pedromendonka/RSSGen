/*
   ||||||||||||||||||||||||||||
   ||        handmade        ||
   ||           by           ||
   ||||||||||||||||||||||||||||
   ||                        ||
   ||     pedromendonka      ||
   ||          2015          ||
   ||||||||||||||||||||||||||||
*/

var fs = Npm.require('fs');
var path = Npm.require('path');
var rootPath = path.resolve('../../../../../');
var rssData;
// RSS structure using XML 1.0, UTF-8, RSS version 2.0 //
var rss = {

    xml: '<?xml version="1.0" encoding="UTF-8" ?>' + '\r\r',
    open: '<rss version="2.0">' + '\r\r',
    close:  "</rss>" + '\r',

    channel: {
        open: '\t' + '<channel>' + '\r\r',
        close: '\t' + '</channel>' + '\r\r',

        title: {
            open: '\t\t' + '<title>',
            close: '</title>' + '\r\r'
        },
        link: {
            open: '\t\t' + '<link>',
            close: '</link>' + '\r'
        },
        description: {
            open: "\t\t" + '<description>',
            close: '</description>' + '\r\r'
        }
    },

    item: {
        open: '\t\t\t' + '<item>' + '\r',
        close: '\t\t\t' + '</item>' + '\r\r',

        title: {
            open: '\t\t\t\t' + '<title>',
            close: '</title>' + '\r'
        },
        link: {
            open: '\t\t\t\t' + '<link>',
            close: '</link>' + '\r'
        },
        description: {
            open: '\t\t\t\t' + '<description>',
            close: '</description>' + '\r'
        }
    }

};


// Exposed RSS info and creation method //
RSSGen = function () {

    this.info = {
        title: 'RSSGen posts',
        link: 'https://atmospherejs.com/pedromendonka/rssgen',
        description: 'RSS simple generator',
        source: [{title: "Topic Title", body: "RSSGen is a simple RSS generator from a mongo collection "}],
        outputDir: '/',
        outputFile: 'rssoutput.xml'
    }

    this.generate = function() {
        rssData = rss.xml;
        rssData += rss.open;
        rssData += rss.channel.open;
        rssData += rss.channel.title.open + this.info.title + rss.channel.title.close;
        rssData += rss.channel.link.open + this.info.link + rss.channel.link.close;
        rssData += rss.channel.description.open + this.info.description + rss.channel.description.close;
        // items generated by source
        for (var i in this.info.source){
            rssData += rss.item.open;
            rssData += rss.item.title.open + this.info.source[i].title + rss.item.title.close;
            rssData += rss.item.link.open + this.info.link + rss.item.link.close;
            rssData += rss.item.description.open + this.info.source[i].body.substring(0,100) + rss.item.description.close;
            rssData += rss.item.close;
        }
        rssData += rss.channel.close;
        rssData += rss.close;

        fs.writeFile(rootPath + this.info.outputDir + this.info.outputFile, rssData, function (error) {
            if (error) {
                throw error;
            } else {
                console.log('RSS generated!');
            }
        });
    };

};
